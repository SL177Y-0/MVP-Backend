const weights = {
    followers: 0.001, retweets: 0.005, quotes: 0.005, replies: 0.002, engagement: 0.0001, verification: 5, tweetFreq: 0.001,
    subscriptions: 2, accountAge: 0.1, media: 0.01, pinned: 5, friends: 0.001, listed: 0.01, superFollow: 5,
    activeChains: 5, nativeBalance: 10, tokenHoldings: 2, nftHoldings: 5, defiPositions: 5, web3Domains: 5,
    transactionCount: 0.01, uniqueTokenInteractions: 1, groupCount: 2, messageFreq: 0.1, pinnedMessages: 5,
    mediaMessages: 2, hashtags: 1, polls: 2, leadership: 5, botInteractions: 1, stickerMessages: 0.5,
    gifMessages: 0.5, mentionCount: 1
};

const badgeThresholds = {
    "Influence Investor": [1000000, 5000000, 10000000], "Tweet Trader": [5, 10, 20], "Engagement Economist": [1000, 5000, 10000],
    "Media Mogul": [100, 500, 1000], "List Legend": [100, 500, 1000], "Verified Visionary": [1, 1, 1],
    "Pinned Post Pro": [1, 1, 1], "Super Follower": [1, 1, 1], "Creator Subscriber": [5, 10, 20],
    "Twitter Veteran": [5, 10, 15], "Retweet Riches": [100, 500, 1000], "Crypto Communicator": [50, 100, 200],
    "Social Connector": [1000, 5000, 10000], "Engagement Star": [2000, 10000, 20000], "Fast Grower": [100000, 500000, 1000000],
    "Viral Validator": [500, 2000, 5000], "Chain Explorer": [2, 5, 10], "Token Holder": [5, 20, 50],
    "NFT Networker": [1, 5, 10], "DeFi Drifter": [1, 3, 5], "Gas Spender": [100, 500, 1000],
    "Staking Veteran": [1, 3, 5], "Airdrop Veteran": [1, 5, 10], "DAO Diplomat": [1, 5, 10],
    "Web3 Domain Owner": [1, 1, 1], "Degen Dualist": [10000, 50000, 100000], "Transaction Titan": [100, 500, 1000],
    "Token Interactor": [10, 50, 100], "NFT Whale": [10, 50, 100], "DeFi Master": [5, 10, 20],
    "Bridge Blazer": [5, 10, 20], "Social HODLer": [1, 10, 50], "Group Guru": [5, 10, 20],
    "Message Maestro": [100, 500, 1000], "Pinned Message Master": [1, 5, 10], "Media Messenger": [10, 50, 100],
    "Hashtag Hero": [10, 50, 100], "Poll Creator": [1, 5, 10], "Community Leader": [1, 3, 5],
    "Bot Interactor": [10, 50, 100], "Sticker Star": [10, 50, 100], "GIF Guru": [10, 50, 100],
    "Mention Magnet": [10, 50, 100], "Telegram Titan": [500, 1000, 2000], "Governance Griot": [2, 5, 10],
    "Dapp Diplomat": [50, 100, 200], "Liquidity Laureate": [1, 3, 5]
};

const titleRequirements = {
    "Crypto Connoisseur": ["Crypto Communicator", "Social Connector", "Liquidity Laureate", "Telegram Titan"],
    "Blockchain Baron": ["DeFi Master", "Liquidity Laureate", "Governance Griot", "Staking Veteran", "Gas Spender"],
    "Digital Dynamo": ["Twitter Veteran", "Fast Grower", "Engagement Star", "Verified Visionary", "Degen Dualist"],
    "DeFi Dynamo": ["DeFi Master", "Airdrop Veteran", "Dapp Diplomat"],
    "NFT Aficionado": ["NFT Networker", "NFT Whale"],
    "Social Savant": ["Crypto Communicator", "Social Connector", "Twitter Veteran", "Engagement Economist", "Retweet Riches"],
    "Protocol Pioneer": ["Chain Explorer", "Bridge Blazer", "DeFi Drifter"],
    "Token Titan": ["Influence Investor", "NFT Networker", "Tweet Trader"],
    "Chain Champion": ["Bridge Blazer", "Viral Validator", "Social HODLer"],
    "Governance Guru": ["DAO Diplomat", "Community Leader", "Governance Griot"]
};

function calculateScore(twitterData, walletData, telegramGroups, telegramMessages) {
    const twitter = twitterData.result.legacy;
    const wallet = {
        "Native Balance Result": walletData["Native Balance Result"],
        "Token Balances Result": walletData["Token Balances Result"],
        "activeChains": walletData["Active Chains Result"].activeChains,
        "DeFi Positions Summary Result": walletData["DeFi Positions Summary Result"],
        "Resolved Address Result": walletData["Resolved Address Result"],
        "Wallet NFTs Result": walletData["Wallet NFTs Result"],
        "transactionCount": walletData["Transaction Count"] || 0,
        "uniqueTokenInteractions": walletData["Unique Token Interactions"] || 0
    };
    const telegram = telegramGroups.items;
    const messages = telegramMessages.items;

    const socialScore = (
        twitter.followers_count * weights.followers +
        (twitter.favourites_count + twitter.media_count + twitter.listed_count) * weights.engagement +
        (twitterData.result.is_blue_verified ? weights.verification : 0) +
        twitter.statuses_count * weights.tweetFreq +
        twitterData.result.creator_subscriptions_count * weights.subscriptions +
        ((new Date() - new Date(twitter.created_at)) / (1000 * 60 * 60 * 24 * 365)) * weights.accountAge +
        twitter.media_count * weights.media +
        (twitter.pinned_tweet_ids_str.length > 0 ? weights.pinned : 0) +
        twitter.friends_count * weights.friends +
        twitter.listed_count * weights.listed +
        (twitterData.result.super_follow_eligible ? weights.superFollow : 0) +
        (twitter.retweet_count || 0) * weights.retweets +
        (twitter.quote_count || 0) * weights.quotes +
        (twitter.reply_count || 0) * weights.replies
    );

    const cryptoScore = (
        wallet.activeChains.length * weights.activeChains +
        wallet["Native Balance Result"] * weights.nativeBalance +
        wallet["Token Balances Result"].length * weights.tokenHoldings +
        wallet["DeFi Positions Summary Result"].length * weights.defiPositions +
        (wallet["Resolved Address Result"] ? weights.web3Domains : 0) +
        wallet.transactionCount * weights.transactionCount +
        wallet.uniqueTokenInteractions * weights.uniqueTokenInteractions
    );

    const nftScore = wallet["Wallet NFTs Result"].length * weights.nftHoldings;

    const communityScore = (
        twitterData.result.creator_subscriptions_count * weights.subscriptions +
        telegram.length * weights.groupCount
    );

    const telegramScore = (
        telegram.length * weights.groupCount +
        messages.length * weights.messageFreq +
        messages.filter(m => m.sourceData.is_pinned).length * weights.pinnedMessages +
        messages.filter(m => m.sourceData.content._ === "messagePhoto").length * weights.mediaMessages +
        messages.reduce((sum, m) => sum + (m.sourceData.content.caption?.entities || []).filter(e => e.type._ === "textEntityTypeHashtag").length, 0) * weights.hashtags +
        (telegram.some(g => g.sourceData.permissions.can_send_polls) ? weights.polls : 0) +
        (telegram.some(g => g.sourceData.permissions.can_pin_messages) ? weights.leadership : 0) +
        messages.filter(m => m.sourceData.via_bot_user_id !== 0).length * weights.botInteractions +
        messages.filter(m => m.sourceData.content._ === "messageSticker").length * weights.stickerMessages +
        messages.filter(m => m.sourceData.content._ === "messageAnimation").length * weights.gifMessages +
        messages.reduce((sum, m) => sum + (m.sourceData.content.entities || []).filter(e => e.type._ === "textEntityTypeMention").length, 0) * weights.mentionCount
    );

    const totalScore = Math.min(socialScore, 50) + Math.min(cryptoScore, 40) + Math.min(nftScore, 30) +
                       Math.min(communityScore, 20) + Math.min(telegramScore, 15);

    return { socialScore, cryptoScore, nftScore, communityScore, telegramScore, totalScore };
}

function assignBadges(twitterData, walletData, telegramGroups, telegramMessages) {
    const twitter = twitterData.result.legacy;
    const wallet = {
        "Native Balance Result": walletData["Native Balance Result"],
        "Token Balances Result": walletData["Token Balances Result"],
        "activeChains": walletData["Active Chains Result"].activeChains,
        "DeFi Positions Summary Result": walletData["DeFi Positions Summary Result"],
        "Resolved Address Result": walletData["Resolved Address Result"],
        "Wallet NFTs Result": walletData["Wallet NFTs Result"],
        "transactionCount": walletData["Transaction Count"] || 0,
        "uniqueTokenInteractions": walletData["Unique Token Interactions"] || 0
    };
    const telegram = telegramGroups.items;
    const messages = telegramMessages.items;

    const badges = {};
    const assignLevel = (badge, value) => {
        const [silver, gold, platinum] = badgeThresholds[badge];
        if (value >= platinum) return { level: "Platinum", value };
        if (value >= gold) return { level: "Gold", value };
        if (value >= silver) return { level: "Silver", value };
        return null;
    };

    // Twitter-Based Badges
    badges["Influence Investor"] = assignLevel("Influence Investor", twitter.followers_count);
    badges["Tweet Trader"] = assignLevel("Tweet Trader", twitter.statuses_count / 100);
    badges["Engagement Economist"] = assignLevel("Engagement Economist", twitter.favourites_count);
    badges["Media Mogul"] = assignLevel("Media Mogul", twitter.media_count);
    badges["List Legend"] = assignLevel("List Legend", twitter.listed_count);
    badges["Verified Visionary"] = assignLevel("Verified Visionary", twitterData.result.is_blue_verified ? 1 : 0);
    badges["Pinned Post Pro"] = assignLevel("Pinned Post Pro", twitter.pinned_tweet_ids_str.length > 0 ? 1 : 0);
    badges["Super Follower"] = assignLevel("Super Follower", twitterData.result.super_follow_eligible ? 1 : 0);
    badges["Creator Subscriber"] = assignLevel("Creator Subscriber", twitterData.result.creator_subscriptions_count);
    badges["Twitter Veteran"] = assignLevel("Twitter Veteran", (new Date() - new Date(twitter.created_at)) / (1000 * 60 * 60 * 24 * 365));
    badges["Retweet Riches"] = assignLevel("Retweet Riches", twitter.retweet_count || 0);
    badges["Crypto Communicator"] = assignLevel("Crypto Communicator", twitter.statuses_count / 100);
    badges["Social Connector"] = assignLevel("Social Connector", twitter.friends_count);
    badges["Engagement Star"] = assignLevel("Engagement Star", (twitter.favourites_count || 0) + (twitter.retweet_count || 0));
    const yearsActive = (new Date() - new Date(twitter.created_at)) / (1000 * 60 * 60 * 24 * 365);
    badges["Fast Grower"] = assignLevel("Fast Grower", twitter.followers_count / (yearsActive || 1));
    badges["Viral Validator"] = assignLevel("Viral Validator", twitter.retweet_count || 0);

    // Wallet-Based Badges
    badges["Chain Explorer"] = assignLevel("Chain Explorer", wallet.activeChains.length);
    badges["Token Holder"] = assignLevel("Token Holder", wallet["Token Balances Result"].length);
    badges["NFT Networker"] = assignLevel("NFT Networker", wallet["Wallet NFTs Result"].length);
    badges["DeFi Drifter"] = assignLevel("DeFi Drifter", wallet["DeFi Positions Summary Result"].length);
    badges["Gas Spender"] = assignLevel("Gas Spender", wallet["Gas Spent"] || 0); // Placeholder: Requires gas spent data
    badges["Staking Veteran"] = assignLevel("Staking Veteran", wallet["Staking Positions"] || 0); // Placeholder: Requires staking data
    badges["Airdrop Veteran"] = assignLevel("Airdrop Veteran", wallet["Airdrops"] || 0); // Placeholder: Requires airdrop data
    badges["DAO Diplomat"] = assignLevel("DAO Diplomat", wallet["DAO Votes"] || 0); // Placeholder: Requires DAO vote data
    badges["Web3 Domain Owner"] = assignLevel("Web3 Domain Owner", wallet["Resolved Address Result"] ? 1 : 0);
    badges["Degen Dualist"] = assignLevel("Degen Dualist", wallet.transactionCount); // Approximation using transaction count
    badges["Transaction Titan"] = assignLevel("Transaction Titan", wallet.transactionCount);
    badges["Token Interactor"] = assignLevel("Token Interactor", wallet.uniqueTokenInteractions);
    badges["NFT Whale"] = assignLevel("NFT Whale", wallet["Wallet NFTs Result"].length);
    badges["DeFi Master"] = assignLevel("DeFi Master", wallet["DeFi Positions Summary Result"].length);
    badges["Bridge Blazer"] = assignLevel("Bridge Blazer", wallet.activeChains.length);
    badges["Social HODLer"] = assignLevel("Social HODLer", wallet["Native Balance Result"]);
    badges["Liquidity Laureate"] = assignLevel("Liquidity Laureate", wallet["DeFi Positions Summary Result"].length);

    // Telegram-Based Badges
    badges["Group Guru"] = assignLevel("Group Guru", telegram.length);
    badges["Message Maestro"] = assignLevel("Message Maestro", messages.length);
    badges["Pinned Message Master"] = assignLevel("Pinned Message Master", messages.filter(m => m.sourceData.is_pinned).length);
    badges["Media Messenger"] = assignLevel("Media Messenger", messages.filter(m => m.sourceData.content._ === "messagePhoto").length);
    badges["Hashtag Hero"] = assignLevel("Hashtag Hero", messages.reduce((sum, m) => sum + (m.sourceData.content.caption?.entities || []).filter(e => e.type._ === "textEntityTypeHashtag").length, 0));
    badges["Poll Creator"] = assignLevel("Poll Creator", telegram.some(g => g.sourceData.permissions.can_send_polls) ? 1 : 0);
    badges["Community Leader"] = assignLevel("Community Leader", telegram.filter(g => g.sourceData.permissions.can_pin_messages).length);
    badges["Bot Interactor"] = assignLevel("Bot Interactor", messages.filter(m => m.sourceData.via_bot_user_id !== 0).length);
    badges["Sticker Star"] = assignLevel("Sticker Star", messages.filter(m => m.sourceData.content._ === "messageSticker").length);
    badges["GIF Guru"] = assignLevel("GIF Guru", messages.filter(m => m.sourceData.content._ === "messageAnimation").length);
    badges["Mention Magnet"] = assignLevel("Mention Magnet", messages.reduce((sum, m) => sum + (m.sourceData.content.entities || []).filter(e => e.type._ === "textEntityTypeMention").length, 0));
    badges["Telegram Titan"] = assignLevel("Telegram Titan", messages.length + (telegram.some(g => g.sourceData.permissions.can_pin_messages) ? 1000 : 0));
    badges["Governance Griot"] = assignLevel("Governance Griot", (telegram.some(g => g.sourceData.permissions.can_pin_messages) ? 1 : 0) + (telegram.some(g => g.sourceData.permissions.can_send_polls) ? 1 : 0));
    badges["Dapp Diplomat"] = assignLevel("Dapp Diplomat", messages.filter(m => m.sourceData.via_bot_user_id !== 0).length);

    return Object.fromEntries(Object.entries(badges).filter(([_, v]) => v));
}

function assignTitleBasedOnBadges(badges) {
    for (const [title, requiredBadges] of Object.entries(titleRequirements)) {
        if (requiredBadges.every(badge => badge in badges)) {
            return title;
        }
    }
    return "ALL ROUNDOOR";
}

function evaluateUser(twitterData, walletData, telegramGroups, telegramMessages) {
    const scores = calculateScore(twitterData, walletData, telegramGroups, telegramMessages);
    const badges = assignBadges(twitterData, walletData, telegramGroups, telegramMessages);
    const title = assignTitleBasedOnBadges(badges);

    return {
        title,
        badges,
        scores
    };
}